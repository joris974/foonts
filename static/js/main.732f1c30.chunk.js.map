{"version":3,"sources":["helpers/helper.ts","components/app/navbar.tsx","components/app/app.tsx","components/common/spinner.tsx","components/common/fonts.tsx","components/pages/generate-page/sidebar/download-modal.tsx","helpers/api.ts","components/common/checkbox.tsx","components/pages/generate-page/sidebar/sidebar-item.tsx","components/pages/generate-page/sidebar/index.tsx","components/pages/generate-page/editable-title.tsx","components/pages/generate-page/editable-content.tsx","components/pages/generate-page/generate-page.tsx","components/pages/generate-page/generate-page-container.tsx","components/withFontList.tsx","components/pages/generate-page/index.tsx","components/pages/explore-page/font-pairing-snippet/index.tsx","components/pages/explore-page/sort-list-filter.tsx","components/pages/explore-page/explore-container.tsx","components/pages/explore-page/explore-handler.tsx","components/pages/explore-page/explore-recent-handler.tsx","components/pages/explore-page/explore-popular-handler.tsx","components/pages/fonts-page/sort-list-filter.tsx","components/pages/fonts-page/fonts-list-item.tsx","components/pages/fonts-page/fonts-page.tsx","components/pages/fonts-page/fonts-page-container.tsx","components/pages/fonts-page/index.tsx","serviceWorker.js","index.js","routers/router.tsx"],"names":["Category","useStyles","makeStyles","title","flexGrow","Navbar","classes","AppBar","position","Toolbar","Typography","variant","className","Button","color","component","RouterLink","to","App","children","this","props","CssBaseline","href","React","Component","allCategories","Display","Serif","SansSerif","Monospace","Handwriting","extractFromMatch","match","fontList","fontsParams","params","fonts","undefined","paramChunks","split","length","titleFontPathPiece","contentFontPathPiece","fromUrl","st","replace","contentFontFamily","findFontByFamily","family","find","font","titleFont","contentFont","updateFontProperties","fontProperties","update","fontSize","fontWeight","fontStyle","newFontSize","newFontWeight","newFontStyle","newFontCategories","fontCategories","type","action","includes","value","difference","concat","fontsToUrl","fontsToSubUrl","toUrlFontFamily","labelForCategory","category","Error","randomFont","categories","fontsInCategory","filter","sample","theme","root","display","justifyContent","alignItems","margin","spacing","Spinner","CircularProgress","Fonts","fontName","fontUrl","fontFace","sectionTitle","marginTop","DownloadModal","show","onHide","toFontCategory","embedCode","cssCode","Dialog","onClose","aria-labelledby","open","DialogTitle","DialogContent","dangerouslySetInnerHTML","__html","getApiUrl","window","location","hostname","loadRecentFontPairings","url","$","ajax","promise","loadPopularFontPairings","sendApi","postParams","method","contentType","data","JSON","stringify","MyCheckbox","isChecked","label","handleChangeCheckbox","FormControlLabel","control","Checkbox","checked","onChange","SidebarItem","onChangeLock","isLocked","fontStyleProps","onChangeFontProperty","isItalic","isBolded","allCategoriesNodes","map","key","lockIcon","ExpansionPanel","ExpansionPanelSummary","expandIcon","aria-label","aria-controls","id","onClick","event","stopPropagation","onFocus","ExpansionPanelDetails","Grid","container","item","xs","Switch","IconButton","hasLiked","existingInStorage","localStorage","getItem","fontPairing","Sidebar","state","showDownloadModal","isLiked","handleClickLike","bind","handleToggleDownloadModal","nextProps","setState","likedPairings","sendFontPairingLikeToApi","newInStorage","setItem","previousState","onClickSwap","onClickGenerate","titleFontPropertiesProps","onChangeTitleFontProperty","onChangeLockTitle","isTitleLocked","contentFontPropertiesProps","onChangeContentFontProperty","onChangeLockContent","isContentLocked","style","startIcon","EditableTitle","content","handleChange","target","fontFamily","contentEditable","DefaultContent","EditableContent","contentPs","line","i","GeneratePage","updateTitleFontProperties","updateContentFontProperties","handleSwap","handleClickGenerate","handleChangeLockTitle","handleChangeLockContent","fontFacesNode","Container","md","defaultTitleStyleProps","defaultContentStyleProps","GeneratePageContainer","handleKeyPress","addEventListener","removeEventListener","HTMLButtonElement","keyCode","generate","updateFonts","newTitleFontPropertiesProps","newContentFontPropertiesProps","randTitleFont","randContentFont","withFontList","loadFonts","then","GeneratePageHandler","reloadOrSave","history","sampleSize","push","sendFontPairingToApi","newTitleFont","newContentFont","withRouter","FontPairingItem","pairing","font_title_id","fontContent","font_content_id","Card","CardContent","CardActions","num_liked","num_views","useState","anchorEl","setAnchorEl","sortedBy","handleClose","handlePick","newSortedBy","aria-haspopup","currentTarget","capitalize","Menu","keepMounted","Boolean","MenuItem","ExploreContainer","numMaxVisible","handleClickSeeMore","fontPairings","pairings","take","sm","btnSeeMore","textAlign","endIcon","pairingsNode","Paper","padding","ExploreHandler","loadFontPairings","SortListFilter","handleChangeSortBy","FontsListItem","FontsPage","filteredFontList","sortedList","sortBy","fontsNode","toCheckboxLi","lg","FontsPageContainer","Object","values","c","filterFontList","ReactDOM","render","exact","from","path","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.732f1c30.chunk.js","sourcesContent":["import sample from \"lodash/sample\";\r\nimport difference from \"lodash/difference\";\r\nimport concat from \"lodash/concat\";\r\nimport { Font } from \"../types/font\";\r\nimport { FontProperties, FontStyle, FontWeight } from \"../types/font-style\";\r\n\r\nexport enum Category {\r\n  Display = \"display\",\r\n  Serif = \"serif\",\r\n  SansSerif = \"sans-serif\",\r\n  Monospace = \"monospace\",\r\n  Handwriting = \"handwriting\"\r\n}\r\n\r\nexport function allCategories(): Category[] {\r\n  return [\r\n    Category.Display,\r\n    Category.Serif,\r\n    Category.SansSerif,\r\n    Category.Monospace,\r\n    Category.Handwriting\r\n  ];\r\n}\r\n\r\nexport function extractFromMatch(\r\n  match: any,\r\n  fontList: Font[]\r\n): { titleFont: Font; contentFont: Font } | null {\r\n  const fontsParams = match && match.params && match.params.fonts;\r\n\r\n  if (fontsParams === null || fontsParams === undefined) {\r\n    return null;\r\n  }\r\n\r\n  const paramChunks = fontsParams.split(\"--\");\r\n  if (paramChunks.length !== 2) {\r\n    return null;\r\n  }\r\n\r\n  const [titleFontPathPiece, contentFontPathPiece] = paramChunks;\r\n  const fromUrl = (st: string) => st.replace(/-/g, \" \");\r\n\r\n  const [titleFontFamily, contentFontFamily] = [\r\n    fromUrl(titleFontPathPiece),\r\n    fromUrl(contentFontPathPiece)\r\n  ];\r\n\r\n  const findFontByFamily = (family: string) =>\r\n    fontList.find(font => font.family === family);\r\n\r\n  const [titleFont, contentFont] = [\r\n    findFontByFamily(titleFontFamily),\r\n    findFontByFamily(contentFontFamily)\r\n  ];\r\n\r\n  if (\r\n    titleFont === null ||\r\n    titleFont === undefined ||\r\n    contentFont === null ||\r\n    contentFont === undefined\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  return { titleFont, contentFont };\r\n}\r\n\r\nexport type UpdateFontProperties =\r\n  | { type: \"fontSize\"; action: \"increment\" | \"decrement\" }\r\n  | { type: \"fontStyle\"; value: FontStyle }\r\n  | { type: \"fontWeight\"; value: FontWeight }\r\n  | { type: \"category\"; value: Category };\r\n\r\nexport function updateFontProperties(\r\n  fontProperties: FontProperties,\r\n  update: UpdateFontProperties\r\n) {\r\n  const { fontSize, fontWeight, fontStyle, fontCategories } = fontProperties;\r\n\r\n  let newFontSize = fontSize;\r\n  let newFontWeight = fontWeight;\r\n  let newFontStyle = fontStyle;\r\n  let newFontCategories = fontCategories;\r\n\r\n  switch (update.type) {\r\n    case \"fontSize\":\r\n      if (update.action === \"increment\") {\r\n        newFontSize = newFontSize + 1;\r\n      } else if (update.action === \"decrement\") {\r\n        newFontSize = newFontSize - 1;\r\n      }\r\n      break;\r\n    case \"fontStyle\":\r\n      newFontStyle = fontStyle === \"italic\" ? \"normal\" : \"italic\";\r\n      break;\r\n    case \"fontWeight\":\r\n      newFontWeight = fontWeight === \"bold\" ? \"normal\" : \"bold\";\r\n      break;\r\n    case \"category\":\r\n      if (newFontCategories.includes(update.value)) {\r\n        newFontCategories = difference(newFontCategories, [update.value]);\r\n      } else {\r\n        newFontCategories = concat(newFontCategories, [update.value]);\r\n      }\r\n      break;\r\n  }\r\n\r\n  const newFontPropertiesProps = {\r\n    fontSize: newFontSize,\r\n    fontWeight: newFontWeight,\r\n    fontStyle: newFontStyle,\r\n    fontCategories: newFontCategories\r\n  };\r\n  return newFontPropertiesProps;\r\n}\r\n\r\nexport function fontsToUrl(titleFont: Font, contentFont: Font) {\r\n  return fontsToSubUrl(titleFont, contentFont);\r\n}\r\n\r\nexport function fontsToSubUrl(titleFont: Font, contentFont: Font) {\r\n  const toUrlFontFamily = (st: string) => st.replace(/ /g, \"-\");\r\n  return `/generate/${toUrlFontFamily(titleFont.family)}--${toUrlFontFamily(\r\n    contentFont.family\r\n  )}`;\r\n}\r\n\r\nexport function labelForCategory(category: Category) {\r\n  switch (category) {\r\n    case \"serif\":\r\n      return \"Serif\";\r\n    case \"sans-serif\":\r\n      return \"Sans serif\";\r\n    case \"display\":\r\n      return \"Cursive\";\r\n    case \"handwriting\":\r\n      return \"Handwriting\";\r\n    case \"monospace\":\r\n      return \"Monospace\";\r\n    default:\r\n      throw new Error(`Invalid category`);\r\n  }\r\n}\r\n\r\nexport function randomFont(fontList: Font[], categories: Category[]): Font {\r\n  const fontsInCategory = fontList.filter(font =>\r\n    categories.includes(font.category)\r\n  );\r\n  const randomFont = sample(fontsInCategory);\r\n  if (randomFont === null || randomFont === undefined) {\r\n    throw new Error(\"Empty list\");\r\n  }\r\n  return randomFont;\r\n}\r\n","import React from \"react\";\r\nimport { Link as RouterLink } from \"react-router-dom\";\r\nimport {\r\n  AppBar,\r\n  Toolbar,\r\n  Typography,\r\n  Button,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nconst Navbar = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"static\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          Foonts\r\n        </Typography>\r\n        <Button color=\"inherit\" component={RouterLink} to=\"/generate\">\r\n          Generate\r\n        </Button>\r\n        <Button color=\"inherit\" component={RouterLink} to=\"/explore/recent\">\r\n          Explore\r\n        </Button>\r\n        <Button color=\"inherit\" component={RouterLink} to=\"/fonts\">\r\n          Fonts\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport Navbar from \"./navbar\";\r\nimport \"./app.css\";\r\nimport { CssBaseline } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  children?: any;\r\n};\r\n\r\nclass App extends React.Component<Props> {\r\n  render() {\r\n    const { children } = this.props;\r\n\r\n    return (\r\n      <div className=\"main-container\">\r\n        <CssBaseline />\r\n        <Navbar />\r\n\r\n        <div className=\"body-container\">{children}</div>\r\n\r\n        <footer className=\"text-center\">\r\n          Designed and built by{\" \"}\r\n          <a href=\"https://github.com/joris974\">Joris Buchou</a>. ©2020\r\n        </footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport { CircularProgress, makeStyles } from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    margin: theme.spacing(2)\r\n  }\r\n}));\r\n\r\nexport default function Spinner() {\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root}>\r\n      <CircularProgress />\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\ntype Props = {\r\n  fontName: string;\r\n  fontUrl: string;\r\n};\r\n\r\nfunction Fonts(props: Props) {\r\n  const { fontName, fontUrl } = props;\r\n\r\n  const toHttps = (st: string) => st.replace(/http:/g, \"https:\");\r\n\r\n  const fontFace = `\r\n      @font-face {\r\n        font-family: '${fontName}';\r\n        src: url('${toHttps(fontUrl)}');\r\n      }`;\r\n\r\n  return <style>{fontFace}</style>;\r\n}\r\n\r\nexport default Fonts;\r\n","import React from \"react\";\r\nimport { Font } from \"../../../../types/font\";\r\nimport {\r\n  Dialog,\r\n  DialogTitle,\r\n  DialogContent,\r\n  Typography,\r\n  makeStyles\r\n} from \"@material-ui/core\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  sectionTitle: {\r\n    color: \"#05668d\",\r\n    fontSize: \"18px\",\r\n    marginTop: \"8px\",\r\n    fontWeight: \"bold\"\r\n  }\r\n}));\r\n\r\ntype Props = {\r\n  titleFont: Font;\r\n  contentFont: Font;\r\n  show: boolean;\r\n  onHide: () => void;\r\n};\r\n\r\nfunction DownloadModal(props: Props) {\r\n  const { titleFont, contentFont, show, onHide } = props;\r\n  const classes = useStyles();\r\n\r\n  const toUrlFontFamily = (st: string) => st.replace(/ /g, \"+\");\r\n  const toFontCategory = (st: string) => st.replace(\"display\", \"cursive\");\r\n  const embedCode = `<link href=\"https://fonts.googleapis.com/css?family=${toUrlFontFamily(\r\n    titleFont.family\r\n  )}|${toUrlFontFamily(contentFont.family)}\" rel=\"stylesheet\">`;\r\n\r\n  const cssCode = `\r\n      font-family: '${titleFont.family}', ${toFontCategory(titleFont.category)};\r\n      <br/>\r\n      font-family: '${contentFont.family}', ${toFontCategory(\r\n    contentFont.category\r\n  )};\r\n    `;\r\n\r\n  return (\r\n    <Dialog onClose={onHide} aria-labelledby=\"simple-dialog-title\" open={show}>\r\n      <DialogTitle>Fast ways to use these fonts</DialogTitle>\r\n      <DialogContent>\r\n        <Typography variant=\"h5\" className={classes.sectionTitle}>\r\n          You have selected these fonts\r\n        </Typography>\r\n\r\n        <Typography variant=\"h6\">Title</Typography>\r\n        <Typography variant=\"body1\">{titleFont.family}</Typography>\r\n\r\n        <Typography variant=\"h6\">Paragraphs</Typography>\r\n        <Typography variant=\"body1\">{contentFont.family}</Typography>\r\n\r\n        <Typography variant=\"h5\" className={classes.sectionTitle}>\r\n          Embed Font\r\n        </Typography>\r\n        <Typography variant=\"body1\">\r\n          To embed your selected fonts into a webpage, copy this code into the\r\n          head of your HTML document.\r\n        </Typography>\r\n\r\n        <pre>{embedCode}</pre>\r\n\r\n        <Typography variant=\"h5\" className={classes.sectionTitle}>\r\n          Specify in CSS\r\n        </Typography>\r\n        <p>Use the following CSS rules to specify these families:</p>\r\n        <pre dangerouslySetInnerHTML={{ __html: cssCode }} />\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default DownloadModal;\r\n","import $ from \"jquery\";\r\nimport { Font } from \"../types/font\";\r\n\r\nfunction getApiUrl() {\r\n  return window.location.hostname === \"foonts.localhost.com\"\r\n    ? \"https://foonts-api.localhost.com/\"\r\n    : \"https://api.foonts.net/\";\r\n}\r\n\r\nexport function loadFonts() {\r\n  const url = `${getApiUrl()}fonts`;\r\n  return $.ajax({ url });\r\n}\r\n\r\nexport function loadRecentFontPairings() {\r\n  const url = `${getApiUrl()}font-pairings/recent`;\r\n  return $.ajax({ url }).promise();\r\n}\r\n\r\nexport function loadPopularFontPairings() {\r\n  const url = `${getApiUrl()}font-pairings/liked`;\r\n  return $.ajax({ url });\r\n}\r\n\r\ntype PostParams = {\r\n  \"font-title-id\": number;\r\n  \"font-content-id\": number;\r\n};\r\n\r\nfunction sendApi(url: string, postParams: PostParams) {\r\n  return $.ajax({\r\n    url,\r\n    method: \"POST\",\r\n    contentType: \"application/json\",\r\n    data: JSON.stringify(postParams)\r\n  });\r\n}\r\n\r\nexport function sendFontPairingToApi(titleFont: Font, contentFont: Font) {\r\n  const url = `${getApiUrl()}font-pairings/`;\r\n  const postParams = {\r\n    \"font-title-id\": titleFont.id,\r\n    \"font-content-id\": contentFont.id\r\n  };\r\n  return sendApi(url, postParams);\r\n}\r\n\r\nexport function sendFontPairingLikeToApi(titleFont: Font, contentFont: Font) {\r\n  const url = `${getApiUrl()}font-pairings/like`;\r\n  const postParams = {\r\n    \"font-title-id\": titleFont.id,\r\n    \"font-content-id\": contentFont.id\r\n  };\r\n  return sendApi(url, postParams);\r\n}\r\n","import React, { ReactNode } from \"react\";\r\nimport { FormControlLabel, Checkbox } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  isChecked: boolean;\r\n  label: string | ReactNode;\r\n  handleChangeCheckbox: (x: any) => void;\r\n};\r\n\r\nexport default function MyCheckbox(props: Props) {\r\n  const { isChecked, label, handleChangeCheckbox } = props;\r\n  return (\r\n    <FormControlLabel\r\n      control={\r\n        <Checkbox\r\n          checked={isChecked}\r\n          onChange={handleChangeCheckbox}\r\n          color=\"primary\"\r\n        />\r\n      }\r\n      label={label}\r\n    />\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Checkbox from \"../../../common/checkbox\";\r\nimport {\r\n  allCategories,\r\n  labelForCategory,\r\n  UpdateFontProperties\r\n} from \"../../../../helpers/helper\";\r\nimport { Font } from \"../../../../types/font\";\r\nimport { FontProperties } from \"../../../../types/font-style\";\r\nimport {\r\n  ExpansionPanel,\r\n  ExpansionPanelSummary,\r\n  Switch,\r\n  IconButton,\r\n  Grid\r\n} from \"@material-ui/core\";\r\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport LockIcon from \"@material-ui/icons/Lock\";\r\nimport LockOpenIcon from \"@material-ui/icons/LockOpen\";\r\nimport AddIcon from \"@material-ui/icons/Add\";\r\nimport RemoveIcon from \"@material-ui/icons/Remove\";\r\n\r\ntype Props = {\r\n  font: Font;\r\n  onChangeLock: () => void;\r\n  isLocked: boolean;\r\n  fontStyleProps: FontProperties;\r\n  onChangeFontProperty: (update: UpdateFontProperties) => void;\r\n};\r\n\r\nclass SidebarItem extends React.Component<Props> {\r\n  render() {\r\n    const {\r\n      font,\r\n      onChangeLock,\r\n      isLocked,\r\n      fontStyleProps,\r\n      onChangeFontProperty\r\n    } = this.props;\r\n\r\n    const { fontStyle, fontWeight, fontCategories } = fontStyleProps;\r\n\r\n    if (font === null || font === undefined) {\r\n      return null;\r\n    }\r\n\r\n    const isItalic = fontStyle === \"italic\";\r\n    const isBolded = fontWeight === \"bold\";\r\n\r\n    const allCategoriesNodes = allCategories().map(category => {\r\n      return (\r\n        <div key={category}>\r\n          <Checkbox\r\n            isChecked={fontCategories.includes(category)}\r\n            label={labelForCategory(category)}\r\n            handleChangeCheckbox={() =>\r\n              onChangeFontProperty({ type: \"category\", value: category })\r\n            }\r\n          />\r\n        </div>\r\n      );\r\n    });\r\n\r\n    const lockIcon = isLocked ? <LockIcon /> : <LockOpenIcon />;\r\n    return (\r\n      <ExpansionPanel>\r\n        <ExpansionPanelSummary\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-label=\"Expand\"\r\n          aria-controls=\"additional-actions1-content\"\r\n          id=\"additional-actions1-header\"\r\n        >\r\n          <FormControlLabel\r\n            aria-label=\"Acknowledge\"\r\n            onClick={event => {\r\n              event.stopPropagation();\r\n              onChangeLock();\r\n            }}\r\n            onFocus={event => {\r\n              event.stopPropagation();\r\n              onChangeLock();\r\n            }}\r\n            control={lockIcon}\r\n            label={font.family}\r\n          />\r\n        </ExpansionPanelSummary>\r\n        <ExpansionPanelDetails>\r\n          <Grid container>\r\n            <Grid item xs={4}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={isBolded}\r\n                    onChange={() =>\r\n                      onChangeFontProperty({\r\n                        type: \"fontWeight\",\r\n                        value: \"bold\"\r\n                      })\r\n                    }\r\n                    value=\"checkedB\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Bold\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <FormControlLabel\r\n                control={\r\n                  <Switch\r\n                    checked={isItalic}\r\n                    onChange={() =>\r\n                      onChangeFontProperty({\r\n                        type: \"fontStyle\",\r\n                        value: \"italic\"\r\n                      })\r\n                    }\r\n                    value=\"checkedB\"\r\n                    color=\"primary\"\r\n                  />\r\n                }\r\n                label=\"Italic\"\r\n              />\r\n            </Grid>\r\n            <Grid item xs={4}>\r\n              <IconButton\r\n                aria-label=\"increment\"\r\n                onClick={() =>\r\n                  onChangeFontProperty({\r\n                    type: \"fontSize\",\r\n                    action: \"increment\"\r\n                  })\r\n                }\r\n              >\r\n                <AddIcon />\r\n              </IconButton>\r\n              <IconButton\r\n                aria-label=\"delete\"\r\n                onClick={() =>\r\n                  onChangeFontProperty({\r\n                    type: \"fontSize\",\r\n                    action: \"decrement\"\r\n                  })\r\n                }\r\n              >\r\n                <RemoveIcon />\r\n              </IconButton>\r\n            </Grid>\r\n            <Grid item xs={12}>\r\n              <h4>Categories</h4>\r\n              {allCategoriesNodes}\r\n            </Grid>\r\n          </Grid>\r\n        </ExpansionPanelDetails>\r\n      </ExpansionPanel>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SidebarItem;\r\n","import React from \"react\";\r\nimport DownloadModal from \"./download-modal\";\r\nimport { sendFontPairingLikeToApi } from \"../../../../helpers/api\";\r\nimport { UpdateFontProperties } from \"../../../../helpers/helper\";\r\nimport { Font } from \"../../../../types/font\";\r\nimport { FontProperties } from \"../../../../types/font-style\";\r\nimport { Button, Grid, Typography } from \"@material-ui/core\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport LoopIcon from \"@material-ui/icons/Loop\";\r\nimport SwapVertIcon from \"@material-ui/icons/SwapVert\";\r\nimport SidebarItem from \"./sidebar-item\";\r\n\r\nfunction hasLiked(titleFont: Font, contentFont: Font) {\r\n  const existingInStorage = localStorage.getItem(\"font-pairing-liked\");\r\n  const fontPairing = `${titleFont.id}-${contentFont.id}`;\r\n  const likedPairings = existingInStorage ? existingInStorage.split(\",\") : [];\r\n  return likedPairings.includes(fontPairing);\r\n}\r\n\r\ntype Props = {\r\n  titleFont: Font;\r\n  contentFont: Font;\r\n  onClickSwap: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\r\n  onClickGenerate: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\r\n  titleFontPropertiesProps: FontProperties;\r\n  onChangeTitleFontProperty: (update: UpdateFontProperties) => void;\r\n  onChangeLockTitle: () => void;\r\n  isTitleLocked: boolean;\r\n\r\n  contentFontPropertiesProps: FontProperties;\r\n  onChangeContentFontProperty: (update: UpdateFontProperties) => void;\r\n  onChangeLockContent: () => void;\r\n  isContentLocked: boolean;\r\n};\r\n\r\ntype State = {\r\n  showDownloadModal: boolean;\r\n  isLiked: boolean;\r\n};\r\n\r\nclass Sidebar extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { showDownloadModal: false, isLiked: false };\r\n    this.handleClickLike = this.handleClickLike.bind(this);\r\n    this.handleToggleDownloadModal = this.handleToggleDownloadModal.bind(this);\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    if (\r\n      nextProps.titleFont !== this.props.titleFont ||\r\n      nextProps.contentFont !== this.props.contentFont\r\n    ) {\r\n      this.setState({ isLiked: false });\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { titleFont, contentFont } = this.props;\r\n    this.setState({ isLiked: hasLiked(titleFont, contentFont) });\r\n  }\r\n\r\n  handleClickLike() {\r\n    const { titleFont, contentFont } = this.props;\r\n\r\n    const existingInStorage = localStorage.getItem(\"font-pairing-liked\");\r\n    const likedPairings = existingInStorage ? existingInStorage.split(\",\") : [];\r\n    const fontPairing = `${titleFont.id}-${contentFont.id}`;\r\n\r\n    if (!likedPairings.includes(fontPairing)) {\r\n      sendFontPairingLikeToApi(titleFont, contentFont);\r\n      const newInStorage = likedPairings.concat(fontPairing);\r\n      localStorage.setItem(\"font-pairing-liked\", JSON.stringify(newInStorage));\r\n    }\r\n\r\n    this.setState({ isLiked: true });\r\n  }\r\n\r\n  handleToggleDownloadModal() {\r\n    this.setState(previousState => ({\r\n      showDownloadModal: !previousState.showDownloadModal\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      onClickSwap,\r\n      onClickGenerate,\r\n      titleFont,\r\n      titleFontPropertiesProps,\r\n      onChangeTitleFontProperty,\r\n      onChangeLockTitle,\r\n      isTitleLocked,\r\n      contentFontPropertiesProps,\r\n      onChangeContentFontProperty,\r\n      onChangeLockContent,\r\n      isContentLocked,\r\n      contentFont\r\n    } = this.props;\r\n\r\n    const { showDownloadModal, isLiked } = this.state;\r\n\r\n    return (\r\n      <Grid container>\r\n        <Grid item xs={12} style={{ margin: \"16px 0 8px 0\" }}>\r\n          <SidebarItem\r\n            font={titleFont}\r\n            isLocked={isTitleLocked}\r\n            onChangeLock={onChangeLockTitle}\r\n            fontStyleProps={titleFontPropertiesProps}\r\n            onChangeFontProperty={onChangeTitleFontProperty}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} style={{ margin: \"8px 0\" }}>\r\n          <SidebarItem\r\n            font={contentFont}\r\n            isLocked={isContentLocked}\r\n            onChangeLock={onChangeLockContent}\r\n            fontStyleProps={contentFontPropertiesProps}\r\n            onChangeFontProperty={onChangeContentFontProperty}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} style={{ margin: \"8px 0\" }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={onClickGenerate}\r\n            startIcon={<LoopIcon />}\r\n          >\r\n            Generate\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12} style={{ margin: \"8px 0\" }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={onClickSwap}\r\n            startIcon={<SwapVertIcon />}\r\n          >\r\n            Swap\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12} style={{ margin: \"8px 0\" }}>\r\n          <Button\r\n            variant={isLiked ? \"contained\" : \"outlined\"}\r\n            color=\"secondary\"\r\n            onClick={this.handleClickLike}\r\n            startIcon={<FavoriteIcon />}\r\n          >\r\n            {isLiked ? \"You liked this\" : \"Like\"}\r\n          </Button>\r\n        </Grid>\r\n        <Grid item xs={12} style={{ margin: \"8px 0\" }}>\r\n          <Button\r\n            variant=\"outlined\"\r\n            onClick={this.handleToggleDownloadModal}\r\n            startIcon={<GetAppIcon />}\r\n          >\r\n            Download\r\n          </Button>\r\n        </Grid>\r\n\r\n        <Grid item xs={12} style={{ margin: \"8px 0\" }}>\r\n          <Typography variant=\"body2\">\r\n            Tip: Press space bar to generate a new combination.\r\n          </Typography>\r\n        </Grid>\r\n\r\n        <DownloadModal\r\n          show={showDownloadModal}\r\n          onHide={this.handleToggleDownloadModal}\r\n          titleFont={titleFont}\r\n          contentFont={contentFont}\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Sidebar;\r\n","import React from \"react\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { FontProperties } from \"../../../types/font-style\";\r\n\r\nconst DefaultTitle = \"Find best matching fonts in seconds!!\";\r\n\r\ntype Props = {\r\n  fontStyleProps: FontProperties;\r\n  font: Font;\r\n};\r\n\r\ntype State = {\r\n  content: string;\r\n};\r\n\r\nclass EditableTitle extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { content: DefaultTitle };\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event: any) {\r\n    this.setState({ content: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { fontStyleProps, font } = this.props;\r\n    const { fontSize, fontWeight, fontStyle } = fontStyleProps;\r\n\r\n    const content = this.state.content;\r\n    const style = {\r\n      fontSize: `${fontSize}px`,\r\n      fontWeight,\r\n      fontStyle,\r\n      fontFamily: font.family\r\n    };\r\n    return (\r\n      <h1\r\n        style={style}\r\n        contentEditable=\"true\"\r\n        className=\"editable editable-title\"\r\n        onChange={this.handleChange}\r\n      >\r\n        {content}\r\n      </h1>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableTitle;\r\n","import React from \"react\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { FontProperties } from \"../../../types/font-style\";\r\n\r\nconst DefaultContent = [\r\n  ` Edit Me!`,\r\n  `If I had a world of my own, everything would be nonsense.\r\n    Nothing would be what it is, because everything would be what it isn't.\r\n    And contrary wise, what is, it wouldn't be. And what it wouldn't be, it would. You see?\r\n    `,\r\n  `Sed scelerisque tristique nunc ac congue.\r\n    Vivamus dolor risus, fringilla a nisl at, pellentesque mattis nisi.\r\n    `,\r\n  `Aliquam facilisis blandit elit nec tempor.\r\n    Aenean commodo tortor ac justo ultrices, quis finibus diam tempus.\r\n    Donec efficitur diam tellus, vitae varius diam euismod eu.\r\n    Phasellus viverra tellus lacus.\r\n    Nam quis ultrices libero.\r\n    Ut pharetra, sem et tincidunt porttitor, felis urna tristique lacus, nec tincidunt nibh est et sapien.\r\n    Vestibulum tempor nisi at congue sodales.\r\n    `\r\n];\r\n\r\ntype Props = {\r\n  fontStyleProps: FontProperties;\r\n  font: Font;\r\n};\r\n\r\ntype State = {\r\n  content: string[];\r\n};\r\n\r\nclass EditableContent extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { content: DefaultContent };\r\n\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n\r\n  handleChange(event: any) {\r\n    this.setState({ content: event.target.value });\r\n  }\r\n\r\n  render() {\r\n    const { fontStyleProps, font } = this.props;\r\n    const { fontSize, fontWeight, fontStyle } = fontStyleProps;\r\n\r\n    const content = this.state.content;\r\n    const style = {\r\n      fontSize: `${fontSize}px`,\r\n      fontWeight,\r\n      fontStyle,\r\n      fontFamily: font.family\r\n    };\r\n\r\n    const contentPs = content.map((line, i) => <p key={i}>{line}</p>);\r\n\r\n    return (\r\n      <div\r\n        style={style}\r\n        contentEditable=\"true\"\r\n        className=\"p editable editable-content\"\r\n        onChange={this.handleChange}\r\n      >\r\n        {contentPs}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default EditableContent;\r\n","import React from \"react\";\r\nimport { Font } from \"../../../types/font\";\r\nimport Spinner from \"../../common/spinner\";\r\nimport Fonts from \"../../common/fonts\";\r\nimport Sidebar from \"./sidebar\";\r\nimport EditableTitle from \"./editable-title\";\r\nimport EditableContent from \"./editable-content\";\r\nimport { FontProperties } from \"../../../types/font-style\";\r\nimport { UpdateFontProperties } from \"../../../helpers/helper\";\r\nimport { Container, Grid } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  titleFont: Font;\r\n  titleFontPropertiesProps: FontProperties;\r\n  contentFont: Font;\r\n  contentFontPropertiesProps: FontProperties;\r\n  isTitleLocked: boolean;\r\n  isContentLocked: boolean;\r\n  updateTitleFontProperties: (update: UpdateFontProperties) => void;\r\n  updateContentFontProperties: (update: UpdateFontProperties) => void;\r\n  handleSwap: (event: React.MouseEvent<HTMLElement, MouseEvent>) => void;\r\n  handleClickGenerate: (\r\n    event: React.MouseEvent<HTMLElement, MouseEvent>\r\n  ) => void;\r\n  handleChangeLockTitle: () => void;\r\n  handleChangeLockContent: () => void;\r\n};\r\n\r\nfunction GeneratePage(props: Props) {\r\n  const {\r\n    titleFont,\r\n    titleFontPropertiesProps,\r\n    contentFont,\r\n    contentFontPropertiesProps,\r\n    isTitleLocked,\r\n    isContentLocked,\r\n    updateTitleFontProperties,\r\n    updateContentFontProperties,\r\n    handleSwap,\r\n    handleClickGenerate,\r\n    handleChangeLockTitle,\r\n    handleChangeLockContent\r\n  } = props;\r\n\r\n  if (!titleFont || !contentFont) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  const fontFacesNode = [titleFont, contentFont].map((font: Font) => (\r\n    <Fonts key={font.family} fontName={font.family} fontUrl={font.url} />\r\n  ));\r\n\r\n  return (\r\n    <Container>\r\n      <Grid container spacing={6}>\r\n        <Grid item xs={12} md={6}>\r\n          <Sidebar\r\n            titleFont={titleFont}\r\n            titleFontPropertiesProps={titleFontPropertiesProps}\r\n            onChangeTitleFontProperty={updateTitleFontProperties}\r\n            contentFont={contentFont}\r\n            contentFontPropertiesProps={contentFontPropertiesProps}\r\n            onChangeContentFontProperty={updateContentFontProperties}\r\n            isTitleLocked={isTitleLocked}\r\n            isContentLocked={isContentLocked}\r\n            onChangeLockTitle={handleChangeLockTitle}\r\n            onChangeLockContent={handleChangeLockContent}\r\n            onClickSwap={handleSwap}\r\n            onClickGenerate={handleClickGenerate}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} md={6}>\r\n          <EditableTitle\r\n            font={titleFont}\r\n            fontStyleProps={titleFontPropertiesProps}\r\n          />\r\n          <EditableContent\r\n            font={contentFont}\r\n            fontStyleProps={contentFontPropertiesProps}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {fontFacesNode}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default GeneratePage;\r\n","import React from \"react\";\r\nimport {\r\n  allCategories,\r\n  randomFont,\r\n  updateFontProperties,\r\n  UpdateFontProperties\r\n} from \"../../../helpers/helper\";\r\nimport { Font } from \"../../../types/font\";\r\nimport GeneratePage from \"./generate-page\";\r\nimport { FontProperties } from \"../../../types/font-style\";\r\n\r\nconst defaultTitleStyleProps: FontProperties = {\r\n  fontSize: 36,\r\n  fontWeight: \"normal\",\r\n  fontStyle: \"normal\",\r\n  fontCategories: allCategories()\r\n};\r\n\r\nconst defaultContentStyleProps: FontProperties = {\r\n  fontSize: 14,\r\n  fontWeight: \"normal\",\r\n  fontStyle: \"normal\",\r\n  fontCategories: allCategories()\r\n};\r\n\r\ntype Props = {\r\n  titleFont: Font;\r\n  contentFont: Font;\r\n  fontList: Font[];\r\n  updateFonts: (titleFont: Font, contentFont: Font) => void;\r\n};\r\n\r\ntype State = {\r\n  isTitleLocked: boolean;\r\n  isContentLocked: boolean;\r\n  titleFontPropertiesProps: FontProperties;\r\n  contentFontPropertiesProps: FontProperties;\r\n};\r\n\r\nclass GeneratePageContainer extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isTitleLocked: false,\r\n      isContentLocked: false,\r\n      titleFontPropertiesProps: defaultTitleStyleProps,\r\n      contentFontPropertiesProps: defaultContentStyleProps\r\n    };\r\n\r\n    this.handleKeyPress = this.handleKeyPress.bind(this);\r\n    this.updateTitleFontProperties = this.updateTitleFontProperties.bind(this);\r\n    this.updateContentFontProperties = this.updateContentFontProperties.bind(\r\n      this\r\n    );\r\n    this.handleSwap = this.handleSwap.bind(this);\r\n    this.handleClickGenerate = this.handleClickGenerate.bind(this);\r\n    this.handleChangeLockTitle = this.handleChangeLockTitle.bind(this);\r\n    this.handleChangeLockContent = this.handleChangeLockContent.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"keydown\", this.handleKeyPress);\r\n  }\r\n\r\n  handleKeyPress(event: any) {\r\n    if (event.target.className.split(\" \").includes(\"editable\")) {\r\n      return;\r\n    }\r\n    if (event.target instanceof HTMLButtonElement) {\r\n      return;\r\n    }\r\n\r\n    if (event.keyCode === 32) {\r\n      this.generate();\r\n    }\r\n  }\r\n\r\n  handleSwap() {\r\n    const { titleFont, contentFont, updateFonts } = this.props;\r\n\r\n    const {\r\n      isTitleLocked,\r\n      isContentLocked,\r\n      titleFontPropertiesProps,\r\n      contentFontPropertiesProps\r\n    } = this.state;\r\n\r\n    const newTitleFontPropertiesProps = {\r\n      fontSize: titleFontPropertiesProps.fontSize,\r\n      fontWeight: contentFontPropertiesProps.fontWeight,\r\n      fontStyle: contentFontPropertiesProps.fontStyle,\r\n      fontCategories: contentFontPropertiesProps.fontCategories\r\n    };\r\n\r\n    const newContentFontPropertiesProps = {\r\n      fontSize: contentFontPropertiesProps.fontSize,\r\n      fontWeight: titleFontPropertiesProps.fontWeight,\r\n      fontStyle: titleFontPropertiesProps.fontStyle,\r\n      fontCategories: titleFontPropertiesProps.fontCategories\r\n    };\r\n\r\n    this.setState(\r\n      {\r\n        isTitleLocked: isContentLocked,\r\n        isContentLocked: isTitleLocked,\r\n        titleFontPropertiesProps: newTitleFontPropertiesProps,\r\n        contentFontPropertiesProps: newContentFontPropertiesProps\r\n      },\r\n      () => {\r\n        updateFonts(contentFont, titleFont);\r\n      }\r\n    );\r\n  }\r\n\r\n  handleClickGenerate(event: React.MouseEvent<HTMLElement, MouseEvent>) {\r\n    this.generate();\r\n  }\r\n\r\n  updateTitleFontProperties(update: UpdateFontProperties) {\r\n    const { titleFontPropertiesProps } = this.state;\r\n    const newTitleFontPropertiesProps = updateFontProperties(\r\n      titleFontPropertiesProps,\r\n      update\r\n    );\r\n    this.setState({ titleFontPropertiesProps: newTitleFontPropertiesProps });\r\n  }\r\n\r\n  updateContentFontProperties(update: UpdateFontProperties) {\r\n    const { contentFontPropertiesProps } = this.state;\r\n    const newContentFontPropertiesProps = updateFontProperties(\r\n      contentFontPropertiesProps,\r\n      update\r\n    );\r\n    this.setState({\r\n      contentFontPropertiesProps: newContentFontPropertiesProps\r\n    });\r\n  }\r\n\r\n  generate() {\r\n    const { fontList, updateFonts, titleFont, contentFont } = this.props;\r\n\r\n    if (fontList.length > 0) {\r\n      const {\r\n        isTitleLocked,\r\n        isContentLocked,\r\n        titleFontPropertiesProps,\r\n        contentFontPropertiesProps\r\n      } = this.state;\r\n\r\n      const randTitleFont = randomFont(\r\n        fontList,\r\n        titleFontPropertiesProps.fontCategories\r\n      );\r\n      const randContentFont = randomFont(\r\n        fontList,\r\n        contentFontPropertiesProps.fontCategories\r\n      );\r\n\r\n      const newTitleFont = isTitleLocked ? titleFont : randTitleFont;\r\n      const newContentFont = isContentLocked ? contentFont : randContentFont;\r\n\r\n      updateFonts(newTitleFont, newContentFont);\r\n    }\r\n  }\r\n\r\n  handleChangeLockTitle() {\r\n    this.setState(previousState => ({\r\n      isTitleLocked: !previousState.isTitleLocked\r\n    }));\r\n  }\r\n\r\n  handleChangeLockContent() {\r\n    this.setState(previousState => ({\r\n      isContentLocked: !previousState.isContentLocked\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { titleFont, contentFont } = this.props;\r\n    const {\r\n      contentFontPropertiesProps,\r\n      titleFontPropertiesProps,\r\n      isTitleLocked,\r\n      isContentLocked\r\n    } = this.state;\r\n\r\n    return (\r\n      <GeneratePage\r\n        titleFont={titleFont}\r\n        titleFontPropertiesProps={titleFontPropertiesProps}\r\n        contentFont={contentFont}\r\n        contentFontPropertiesProps={contentFontPropertiesProps}\r\n        isTitleLocked={isTitleLocked}\r\n        isContentLocked={isContentLocked}\r\n        updateTitleFontProperties={this.updateTitleFontProperties}\r\n        updateContentFontProperties={this.updateContentFontProperties}\r\n        handleSwap={this.handleSwap}\r\n        handleClickGenerate={this.handleClickGenerate}\r\n        handleChangeLockTitle={this.handleChangeLockTitle}\r\n        handleChangeLockContent={this.handleChangeLockContent}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default GeneratePageContainer;\r\n","import React from \"react\";\r\nimport { Subtract } from \"utility-types\";\r\nimport { Font } from \"../types/font\";\r\nimport { loadFonts } from \"../helpers/api\";\r\nimport Spinner from \"./common/spinner\";\r\n\r\nexport type Props = {\r\n  fontList: Font[];\r\n};\r\n\r\ntype State = {\r\n  fontList: Font[];\r\n};\r\n\r\nexport function withFontList<P extends Props>(\r\n  Component: React.ComponentType<P>\r\n) {\r\n  return class WithFontList extends React.Component<Subtract<P, Props>, State> {\r\n    constructor(props: Subtract<P, Props>) {\r\n      super(props);\r\n      this.state = { fontList: [] };\r\n    }\r\n\r\n    componentDidMount() {\r\n      loadFonts().then(fontList => {\r\n        this.setState({ fontList });\r\n      });\r\n    }\r\n\r\n    render() {\r\n      const { fontList } = this.state;\r\n      if (fontList.length === 0) {\r\n        return <Spinner />;\r\n      }\r\n\r\n      return <Component {...(this.props as P)} fontList={fontList} />;\r\n    }\r\n  };\r\n}\r\n","import { withRouter, RouteComponentProps } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport sampleSize from \"lodash/sampleSize\";\r\nimport { Font } from \"../../../types/font\";\r\nimport GeneratePageContainer from \"./generate-page-container\";\r\nimport { fontsToUrl, extractFromMatch } from \"../../../helpers/helper\";\r\nimport { sendFontPairingToApi } from \"../../../helpers/api\";\r\nimport Spinner from \"../../common/spinner\";\r\nimport { withFontList } from \"../../withFontList\";\r\n\r\ntype Params = {\r\n  fonts: string;\r\n};\r\n\r\ntype Props = RouteComponentProps<Params> & {\r\n  fontList: Font[];\r\n};\r\n\r\ntype State = {\r\n  titleFont: Font | null | undefined;\r\n  contentFont: Font | null | undefined;\r\n};\r\n\r\nclass GeneratePageHandler extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    const fontsParams = extractFromMatch(props.match, props.fontList);\r\n\r\n    const [titleFont, contentFont] =\r\n      fontsParams !== null && fontsParams !== undefined\r\n        ? [fontsParams.titleFont, fontsParams.contentFont]\r\n        : [null, null];\r\n\r\n    this.state = {\r\n      titleFont,\r\n      contentFont\r\n    };\r\n\r\n    this.updateFonts = this.updateFonts.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.reloadOrSave(this.props);\r\n  }\r\n\r\n  reloadOrSave(props: Props) {\r\n    const { history, match, fontList } = this.props;\r\n    const fontsParams = extractFromMatch(match, fontList);\r\n\r\n    if (fontsParams === null || fontsParams === undefined) {\r\n      if (fontList.length > 0) {\r\n        const [randTitleFont, randContentFont] = sampleSize(fontList, 2);\r\n        const url = fontsToUrl(randTitleFont, randContentFont);\r\n        history.push(url);\r\n      }\r\n    } else {\r\n      const { titleFont, contentFont } = fontsParams;\r\n      sendFontPairingToApi(titleFont, contentFont);\r\n      this.setState({\r\n        titleFont,\r\n        contentFont\r\n      });\r\n    }\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps: Props) {\r\n    this.reloadOrSave(nextProps);\r\n  }\r\n\r\n  updateFonts(newTitleFont: Font, newContentFont: Font) {\r\n    const { history } = this.props;\r\n    const url = fontsToUrl(newTitleFont, newContentFont);\r\n    history.push(url);\r\n    this.setState({\r\n      titleFont: newTitleFont,\r\n      contentFont: newContentFont\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { fontList } = this.props;\r\n    const { titleFont, contentFont } = this.state;\r\n\r\n    if (!titleFont || !contentFont) {\r\n      return <Spinner />;\r\n    }\r\n\r\n    return (\r\n      <GeneratePageContainer\r\n        fontList={fontList}\r\n        titleFont={titleFont}\r\n        contentFont={contentFont}\r\n        updateFonts={this.updateFonts}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(withFontList(GeneratePageHandler));\r\n","import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Fonts from \"../../../common/fonts\";\r\nimport { fontsToSubUrl } from \"../../../../helpers/helper\";\r\nimport { Font } from \"../../../../types/font\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport VisibilityIcon from \"@material-ui/icons/Visibility\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { FontPairing } from \"../../../../types/font-pairing\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n  pairing: FontPairing;\r\n};\r\n\r\nfunction FontPairingItem(props: Props) {\r\n  const { fontList, pairing } = props;\r\n  const titleFont = fontList.find(font => font.id === pairing.font_title_id);\r\n  const fontContent = fontList.find(\r\n    font => font.id === pairing.font_content_id\r\n  );\r\n\r\n  if (\r\n    titleFont === null ||\r\n    titleFont === undefined ||\r\n    fontContent === null ||\r\n    fontContent === undefined\r\n  ) {\r\n    return null;\r\n  }\r\n\r\n  const fontFacesNode = [titleFont, fontContent].map((font: Font) => (\r\n    <Fonts key={font.family} fontName={font.family} fontUrl={font.url} />\r\n  ));\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardContent>\r\n          <h2 style={{ fontFamily: titleFont.family }}>{titleFont.family}</h2>\r\n          <p style={{ fontFamily: fontContent.family }}>{fontContent.family}</p>\r\n        </CardContent>\r\n        <CardActions>\r\n          <IconButton aria-label=\"like\">\r\n            <FavoriteIcon /> {pairing.num_liked}\r\n          </IconButton>\r\n          <IconButton aria-label=\"share\">\r\n            <VisibilityIcon /> {pairing.num_views}\r\n          </IconButton>\r\n        </CardActions>\r\n        <CardActions>\r\n          <Link to={fontsToSubUrl(titleFont, fontContent)}>View More</Link>\r\n        </CardActions>\r\n      </Card>\r\n      {fontFacesNode}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FontPairingItem;\r\n","import React from \"react\";\r\nimport capitalize from \"lodash/capitalize\";\r\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\r\nimport { RouteComponentProps, withRouter } from \"react-router-dom\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\n\r\ntype Props = RouteComponentProps<{}> & {\r\n  sortedBy: \"recent\" | \"popular\";\r\n};\r\n\r\nfunction SortListFilter(props: Props) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const { sortedBy, history } = props;\r\n\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handlePick = (newSortedBy: \"recent\" | \"popular\") => {\r\n    history.push(`/explore/${newSortedBy}`);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        aria-controls=\"simple-menu\"\r\n        aria-haspopup=\"true\"\r\n        onClick={handleClick}\r\n      >\r\n        Sort by&nbsp;{capitalize(sortedBy)}\r\n        <KeyboardArrowDownIcon />\r\n      </Button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={() => handlePick(\"recent\")}>Recent</MenuItem>\r\n        <MenuItem onClick={() => handlePick(\"popular\")}>Popular</MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default withRouter(SortListFilter);\r\n","import React from \"react\";\r\nimport take from \"lodash/take\";\r\nimport FontPairingItem from \"./font-pairing-snippet\";\r\nimport Spinner from \"../../common/spinner\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { FontPairing } from \"../../../types/font-pairing\";\r\nimport { Grid, Container, Button, Paper } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\nimport SortListFilter from \"./sort-list-filter\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n  fontPairings: FontPairing[];\r\n  sortedBy: \"recent\" | \"popular\";\r\n};\r\n\r\ntype State = {\r\n  numMaxVisible: number;\r\n};\r\n\r\nclass ExploreContainer extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { numMaxVisible: 12 };\r\n\r\n    this.handleClickSeeMore = this.handleClickSeeMore.bind(this);\r\n  }\r\n\r\n  handleClickSeeMore() {\r\n    this.setState({ numMaxVisible: this.state.numMaxVisible + 12 });\r\n  }\r\n\r\n  render() {\r\n    const { fontList, fontPairings, sortedBy } = this.props;\r\n    const { numMaxVisible } = this.state;\r\n\r\n    const visibleFontPairings = take(fontPairings, numMaxVisible);\r\n\r\n    const pairings = visibleFontPairings.map(pairing => {\r\n      return (\r\n        <Grid item xs={12} sm={6} md={3} key={pairing.id}>\r\n          <FontPairingItem fontList={fontList} pairing={pairing} />\r\n        </Grid>\r\n      );\r\n    });\r\n\r\n    const btnSeeMore =\r\n      numMaxVisible > fontPairings.length ? null : (\r\n        <Grid container spacing={10}>\r\n          <Grid item xs={12} style={{ textAlign: \"center\" }}>\r\n            <Button\r\n              color=\"primary\"\r\n              endIcon={<ExpandMoreIcon />}\r\n              onClick={this.handleClickSeeMore}\r\n            >\r\n              See more\r\n            </Button>\r\n          </Grid>\r\n        </Grid>\r\n      );\r\n\r\n    const pairingsNode =\r\n      fontPairings.length > 0 ? (\r\n        <>\r\n          <Grid container spacing={4}>\r\n            {pairings}\r\n          </Grid>\r\n          {btnSeeMore}\r\n        </>\r\n      ) : (\r\n        <Spinner />\r\n      );\r\n\r\n    return (\r\n      <Container>\r\n        <Paper style={{ margin: \"16px 0\", padding: \"16px\" }}>\r\n          <Grid container spacing={4}>\r\n            <Grid item xs={12} style={{ textAlign: \"center\" }}>\r\n              <SortListFilter sortedBy={sortedBy} />\r\n            </Grid>\r\n          </Grid>\r\n        </Paper>\r\n        {pairingsNode}\r\n      </Container>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExploreContainer;\r\n","import React from \"react\";\r\nimport ExplorePage from \"./explore-container\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { FontPairing } from \"../../../types/font-pairing\";\r\nimport Spinner from \"../../common/spinner\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n  loadFontPairings: () => any;\r\n  sortedBy: \"recent\" | \"popular\";\r\n};\r\n\r\ntype State = {\r\n  fontPairings: FontPairing[];\r\n};\r\n\r\nclass ExploreHandler extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { fontPairings: [] };\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { loadFontPairings } = this.props;\r\n\r\n    loadFontPairings().then((fontPairings: FontPairing[]) => {\r\n      this.setState({ fontPairings });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { fontList, sortedBy } = this.props;\r\n    const { fontPairings } = this.state;\r\n\r\n    return fontPairings.length > 0 ? (\r\n      <ExplorePage\r\n        fontList={fontList}\r\n        fontPairings={fontPairings}\r\n        sortedBy={sortedBy}\r\n      />\r\n    ) : (\r\n      <Spinner />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ExploreHandler;\r\n","import React from \"react\";\r\nimport { loadRecentFontPairings } from \"./../../../helpers/api\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { withFontList } from \"./../../withFontList\";\r\nimport ExploreHandler from \"./explore-handler\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n};\r\n\r\nfunction ExploreRecentHandler(props: Props) {\r\n  const { fontList } = props;\r\n  return (\r\n    <ExploreHandler\r\n      fontList={fontList}\r\n      loadFontPairings={loadRecentFontPairings}\r\n      sortedBy=\"recent\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default withFontList(ExploreRecentHandler);\r\n","import React from \"react\";\r\nimport { loadPopularFontPairings } from \"../../../helpers/api\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { withFontList } from \"../../withFontList\";\r\nimport ExploreHandler from \"./explore-handler\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n};\r\n\r\nfunction ExplorePopularHandler(props: Props) {\r\n  const { fontList } = props;\r\n  return (\r\n    <ExploreHandler\r\n      fontList={fontList}\r\n      loadFontPairings={loadPopularFontPairings}\r\n      sortedBy=\"popular\"\r\n    />\r\n  );\r\n}\r\n\r\nexport default withFontList(ExplorePopularHandler);\r\n","import React from \"react\";\r\nimport capitalize from \"lodash/capitalize\";\r\nimport { Button, Menu, MenuItem } from \"@material-ui/core\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\n\r\ntype Props = {\r\n  sortedBy: string;\r\n  handleChangeSortBy: (sortedBy: string) => void;\r\n};\r\n\r\nfunction SortListFilter(props: Props) {\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n  const { sortedBy, handleChangeSortBy } = props;\r\n\r\n  const handleClick = (event: any) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const handlePick = (sortedBy: string) => {\r\n    handleChangeSortBy(sortedBy);\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        aria-controls=\"simple-menu\"\r\n        aria-haspopup=\"true\"\r\n        onClick={handleClick}\r\n      >\r\n        Sort by&nbsp;{capitalize(sortedBy)}\r\n        <KeyboardArrowDownIcon />\r\n      </Button>\r\n      <Menu\r\n        id=\"simple-menu\"\r\n        anchorEl={anchorEl}\r\n        keepMounted\r\n        open={Boolean(anchorEl)}\r\n        onClose={handleClose}\r\n      >\r\n        <MenuItem onClick={() => handlePick(\"popular\")}>Popular</MenuItem>\r\n        <MenuItem onClick={() => handlePick(\"alphabetical\")}>\r\n          Alphabetical\r\n        </MenuItem>\r\n      </Menu>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SortListFilter;\r\n","import React from \"react\";\r\nimport Fonts from \"../../common/fonts\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { Card, CardContent } from \"@material-ui/core\";\r\n\r\ntype Props = {\r\n  font: Font;\r\n};\r\n\r\nfunction FontsListItem(props: Props) {\r\n  const { font } = props;\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardContent>\r\n          <h4>{font.family}</h4>\r\n          <h2 style={{ fontFamily: font.family }}>\r\n            The quick brown fox jumps over the lazy dog\r\n          </h2>\r\n        </CardContent>\r\n      </Card>\r\n      <Fonts key={font.family} fontName={font.family} fontUrl={font.url} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default FontsListItem;\r\n","import React from \"react\";\r\nimport sortBy from \"lodash/sortBy\";\r\nimport take from \"lodash/take\";\r\nimport SortListFilter from \"./sort-list-filter\";\r\nimport Checkbox from \"../../common/checkbox\";\r\nimport { labelForCategory } from \"../../../helpers/helper\";\r\nimport { Category } from \"../../../helpers/helper\";\r\nimport { Font } from \"../../../types/font\";\r\nimport FontsListItem from \"./fonts-list-item\";\r\nimport { Grid, Button, Container, Paper } from \"@material-ui/core\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n  numMaxVisible: number;\r\n  filteredFontList: Font[];\r\n  fontCategories: Category[];\r\n  sortedBy: string;\r\n  handleClickSeeMore: () => void;\r\n  handleChangeCheckbox: (category: Category) => void;\r\n  handleChangeSortBy: (sortBy: string) => void;\r\n};\r\n\r\nfunction FontsPage(props: Props) {\r\n  const {\r\n    numMaxVisible,\r\n    filteredFontList,\r\n    fontCategories,\r\n    sortedBy,\r\n    handleClickSeeMore,\r\n    handleChangeCheckbox,\r\n    handleChangeSortBy\r\n  } = props;\r\n\r\n  const sortedList = sortBy(filteredFontList, (font: Font) => {\r\n    if (sortedBy === \"alphabetical\") {\r\n      return font.family;\r\n    } else if (sortedBy === \"popular\") {\r\n      return -font.num_liked;\r\n    }\r\n  });\r\n  const limitedResults = take(sortedList, numMaxVisible);\r\n\r\n  const fontsNode = limitedResults.map(font => (\r\n    <Grid item xs={12} key={font.id}>\r\n      <FontsListItem font={font} />\r\n    </Grid>\r\n  ));\r\n\r\n  const btnSeeMore =\r\n    numMaxVisible > filteredFontList.length ? null : (\r\n      <Grid item xs={12} style={{ textAlign: \"center\" }}>\r\n        <Button\r\n          color=\"primary\"\r\n          endIcon={<ExpandMoreIcon />}\r\n          onClick={handleClickSeeMore}\r\n        >\r\n          See more\r\n        </Button>\r\n      </Grid>\r\n    );\r\n\r\n  const toCheckboxLi = (category: Category) => {\r\n    return (\r\n      <Grid item xs={6} md={4} lg={2}>\r\n        <Checkbox\r\n          isChecked={isChecked(fontCategories, category)}\r\n          handleChangeCheckbox={() => handleChangeCheckbox(category)}\r\n          label={labelForCategory(category)}\r\n        />\r\n      </Grid>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Paper style={{ margin: \"16px 0\", padding: \"16px\" }}>\r\n        <Grid container spacing={4}>\r\n          <Grid item xs={12} style={{ textAlign: \"center\" }}>\r\n            <SortListFilter\r\n              sortedBy={sortedBy}\r\n              handleChangeSortBy={handleChangeSortBy}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} style={{ textAlign: \"left\" }}>\r\n            <Grid container spacing={1}>\r\n              {toCheckboxLi(Category.Serif)}\r\n              {toCheckboxLi(Category.SansSerif)}\r\n              {toCheckboxLi(Category.Display)}\r\n              {toCheckboxLi(Category.Handwriting)}\r\n              {toCheckboxLi(Category.Monospace)}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Paper>\r\n      <Grid container spacing={4}>\r\n        {fontsNode}\r\n        {btnSeeMore}\r\n      </Grid>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default FontsPage;\r\n\r\nfunction isChecked(fontCategories: Category[], category: Category) {\r\n  return fontCategories.includes(category);\r\n}\r\n","import React from \"react\";\r\nimport { allCategories } from \"../../../helpers/helper\";\r\nimport { Category } from \"../../../helpers/helper\";\r\nimport { Font } from \"../../../types/font\";\r\nimport FontsPage from \"./fonts-page\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n};\r\n\r\ntype State = {\r\n  numMaxVisible: number;\r\n  filteredFontList: Font[];\r\n  fontCategories: Category[];\r\n  sortedBy: string;\r\n};\r\n\r\nclass FontsPageContainer extends React.Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      numMaxVisible: 12,\r\n      filteredFontList: props.fontList,\r\n      fontCategories: allCategories(),\r\n      sortedBy: \"popular\"\r\n    };\r\n\r\n    this.handleClickSeeMore = this.handleClickSeeMore.bind(this);\r\n    this.handleChangeCheckbox = this.handleChangeCheckbox.bind(this);\r\n    this.handleChangeSortBy = this.handleChangeSortBy.bind(this);\r\n  }\r\n\r\n  handleClickSeeMore() {\r\n    this.setState({ numMaxVisible: this.state.numMaxVisible + 12 });\r\n  }\r\n\r\n  handleChangeCheckbox(category: Category) {\r\n    const { fontCategories } = this.state;\r\n\r\n    const newFontCategories = Object.values(fontCategories).includes(category)\r\n      ? fontCategories.filter(c => c !== category)\r\n      : [...fontCategories, category];\r\n\r\n    const filteredFontList = filterFontList(\r\n      this.props.fontList,\r\n      newFontCategories\r\n    );\r\n    this.setState({ fontCategories: newFontCategories, filteredFontList });\r\n  }\r\n\r\n  handleChangeSortBy(sortBy: string) {\r\n    const { sortedBy } = this.state;\r\n    if (sortBy === sortedBy) {\r\n      return;\r\n    }\r\n    this.setState({ sortedBy: sortBy });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <FontsPage\r\n        {...this.props}\r\n        {...this.state}\r\n        handleChangeCheckbox={this.handleChangeCheckbox}\r\n        handleClickSeeMore={this.handleClickSeeMore}\r\n        handleChangeSortBy={this.handleChangeSortBy}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nexport default FontsPageContainer;\r\n\r\nfunction filterFontList(fontList: Font[], fontCategories: Category[]) {\r\n  return fontList.filter((font: Font) =>\r\n    fontCategories.includes(font.category)\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport FontsPageContainer from \"./fonts-page-container\";\r\nimport { Font } from \"../../../types/font\";\r\nimport { withFontList } from \"../../withFontList\";\r\n\r\ntype Props = {\r\n  fontList: Font[];\r\n};\r\n\r\nfunction FontsPageWrapper(props: Props) {\r\n  const { fontList } = props;\r\n  return <FontsPageContainer fontList={fontList} />;\r\n}\r\n\r\nexport default withFontList(FontsPageWrapper);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { \"Service-Worker\": \"script\" }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { AppRouter } from \"./routers/router\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<AppRouter />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","import { HashRouter, Switch, Route, Redirect } from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport App from \"../components/app/app\";\r\nimport GeneratePage from \"../components/pages/generate-page\";\r\nimport ExploreRecentPage from \"../components/pages/explore-page/explore-recent-handler\";\r\nimport ExplorePopularPage from \"../components/pages/explore-page/explore-popular-handler\";\r\nimport FontsPage from \"../components/pages/fonts-page\";\r\n\r\nexport function AppRouter() {\r\n  return (\r\n    <HashRouter>\r\n      <App>\r\n        <Switch>\r\n          <Redirect exact from=\"/\" to=\"/generate\" />\r\n          <Route path=\"/generate/:fonts?\">\r\n            <GeneratePage />\r\n          </Route>\r\n          <Route path=\"/explore/recent\">\r\n            <ExploreRecentPage />\r\n          </Route>\r\n          <Route path=\"/explore/popular\">\r\n            <ExplorePopularPage />\r\n          </Route>\r\n          <Route path=\"/fonts\">\r\n            <FontsPage />\r\n          </Route>\r\n        </Switch>\r\n      </App>\r\n    </HashRouter>\r\n  );\r\n}\r\n"],"sourceRoot":""}